{
  "permissions": {
    "allow": [
      "Bash(python:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(chmod:*)",
      "Bash(rm:*)",
      "Bash(curl:*)",
      "Bash(pkill:*)",
      "Bash(timeout:*)",
      "WebFetch(domain:github.com)",
      "Bash(sudo apt:*)",
      "Bash(sudo apt install:*)",
      "Bash(kill:*)",
      "Bash(ls:*)",
      "Bash(grep:*)",
      "Bash(mkdir:*)",
      "Bash(cp:*)",
      "Bash(/mnt/c/users/dfoss/desktop/localaimodels/Whisper/whisper-env/Scripts/python.exe -m whisper --help)",
      "Bash(/mnt/c/users/dfoss/desktop/localaimodels/Whisper/whisper-env/Scripts/python.exe -c \"print(''Hello from Windows Python'')\")",
      "Bash(/mnt/c/users/dfoss/desktop/localaimodels/Whisper/whisper-env/Scripts/python.exe -c \"import whisper; print(''Whisper version:'', whisper.__version__)\")",
      "Bash(openssl req:*)",
      "Bash(find:*)",
      "Bash(true)",
      "Bash(./whisper-env/Scripts/python.exe -c \"import whisper; print(''Available models:'', whisper.available_models())\")",
      "Bash(./whisper-env/Scripts/python.exe -c \"import whisper; model = whisper.load_model(''tiny.en''); print(''Tiny.en model loaded successfully'')\")",
      "Bash(pip uninstall:*)",
      "Bash(mv:*)",
      "WebFetch(domain:huggingface.co)",
      "Bash(git lfs clone:*)",
      "Bash(git clone:*)",
      "Bash(cmd.exe:*)",
      "Bash(export OPENBLAS_NUM_THREADS=1)",
      "Bash(export OMP_NUM_THREADS=1)",
      "Bash(pip search:*)",
      "Bash(pip show:*)",
      "Bash(ffmpeg:*)",
      "Bash(/mnt/c/users/dfoss/desktop/localaimodels/assistant/venv/bin/python test_opus.py)",
      "WebFetch(domain:discordpy.readthedocs.io)",
      "WebFetch(domain:raw.githubusercontent.com)",
      "WebFetch(domain:discord.com)",
      "WebFetch(domain:git.unturf.com)",
      "WebFetch(domain:guide.pycord.dev)",
      "WebFetch(domain:docs.pycord.dev)",
      "Bash(wsl bash:*)",
      "Bash(wsl:*)",
      "Bash(cat:*)",
      "Bash(./venv/Scripts/python.exe -c \"import discord; print(f''py-cord version: {discord.__version__}'')\")",
      "Bash(./simple_bot_manager.bat)",
      "Bash(./venv/Scripts/pip.exe list)",
      "Bash(./venv/Scripts/python.exe simple_voice_fix.py:*)",
      "Bash(taskkill:*)",
      "Bash(./venv/Scripts/pip.exe show py-cord)",
      "Bash(./venv/Scripts/pip.exe install --upgrade py-cord[voice])",
      "Bash(./venv/Scripts/pip.exe uninstall py-cord -y)",
      "Bash(./venv/Scripts/pip.exe install discord.py[voice]==2.3.2)",
      "Bash(powershell.exe:*)",
      "Bash(echo:*)",
      "Bash(whereis:*)",
      "Bash(./kill_bot.bat)",
      "Bash(ss:*)",
      "Bash(bot_venv_windows/Scripts/python final_voice_bot.py)",
      "Bash(bot_venv_windows/Scripts/python test_opus.py)",
      "Bash(bot_venv_windows/Scripts/python.exe:*)",
      "Bash(where opus)",
      "Bash(bot_venv_windows/Scripts/python:*)",
      "WebFetch(domain:docs.pipecat.ai)",
      "Bash(C:/Users/dfoss/Desktop/LocalAIModels/Assistant/WindowsDiscordBot/bot_venv_windows/Scripts/python direct_audio_bot.py)",
      "Bash(\"/mnt/c/users/dfoss/desktop/localaimodels/assistant/WindowsDiscordBot/bot_venv_windows/Scripts/python.exe\" direct_audio_bot.py)",
      "WebFetch(domain:reference-server.pipecat.ai)",
      "Bash(ip route:*)",
      "Bash(hostname:*)",
      "Bash(pwdx:*)",
      "Bash(fuser:*)",
      "Bash(just start-all:*)",
      "Bash(export PATH=\"$HOME/.local/bin:$PATH\")",
      "Bash(just status:*)",
      "Bash(just backend-logs:*)",
      "Bash(just:*)",
      "Bash(./install_kokoro.sh:*)",
      "Bash(apt list:*)",
      "WebFetch(domain:x.com)",
      "Bash(git init:*)",
      "Bash(git config:*)",
      "Bash(git branch:*)",
      "Bash(git add:*)",
      "Bash(git remote add:*)",
      "Bash(git remote:*)",
      "Bash(git push:*)",
      "Bash(git checkout:*)",
      "Bash(tasklist.exe:*)",
      "Bash(wget:*)",
      "Bash(git commit:*)",
      "Bash(sudo pkill:*)",
      "Bash(./shutdown_all.sh)",
      "Bash(npm run build:*)",
      "Bash(npx vite build:*)",
      "Bash(pip3 install:*)",
      "Bash(sudo ss:*)",
      "Bash(wmic.exe:*)",
      "Bash(./cleanup_all_services.sh:*)",
      "Bash(nvidia-smi:*)",
      "Bash(npm run dev:*)",
      "Bash(git reset:*)",
      "Bash(./stop_production_system.sh:*)",
      "Bash(./start_production_system.sh:*)",
      "Bash(./fix_wsl_networking.sh:*)",
      "Bash(npm install)",
      "Bash(./scripts/startup/start_production_system.sh:*)",
      "Bash(./scripts/startup/stop_production_system.sh:*)"
    ],
    "deny": []
  }
}